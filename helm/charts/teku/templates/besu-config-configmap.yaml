{{- if eq .Values.node.elc.client "besu" }}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "teku.fullname" . }}-besu-config
  labels:
    app.kubernetes.io/name: besu-config
    app.kubernetes.io/component: besu
    app.kubernetes.io/part-of: {{ include "teku.fullname" . }}
    app.kubernetes.io/namespace: {{ template "teku.chart" . }}
    app.kubernetes.io/release: {{ .Release.Name }}
    app.kubernetes.io/managed-by: helm
    heritage: {{ .Release.Service }}
    helm.sh/chart: {{ include "teku.chart" . }}
  namespace: {{ .Release.Namespace }}
data:
  config.toml: |-
    # Every possible CLI should be in this file.
    #
    # Please use a plausible value, besu has to at least be able to parse it.
    # If it is a multi-valued CLI make it a TOML array.
    # If it is a number or boolean make it a number or boolean
    # All other config options are strings, and must be quoted.

    # Node Information
    network={{ .Values.node.network }}
    data-path={{ .Values.node.elc.dataPath | quote }}
    logging={{ .Values.node.elc.logging | quote }}
    engine-host-allowlist={{ .Values.node.elc.engine.hostAllowlist }}
    engine-rpc-port={{ .Values.node.elc.engine.port }}
    engine-jwt-secret={{ .Values.node.elc.engine.jwtSecretPath | quote }}
    Xmerge-support={{ .Values.node.elc.engine.xMmergeSupport }}

    {{ if  .Values.node.elc.p2p.enabled -}}
    # P2P network
    p2p-enabled={{ .Values.node.elc.p2p.enabled }}
    discovery-enabled={{ .Values.node.elc.p2p.discovery }}
    static-nodes-file={{ .Values.node.elc.p2p.staticNodes | quote }}
    p2p-host={{ .Values.node.elc.p2p.host | quote }}
    p2p-port={{ .Values.node.elc.p2p.port }}
    max-peers={{ .Values.node.elc.p2p.maxPeers }}
    {{ end }}

    {{ if or .Values.node.elc.rpc.enabled }}
    host-allowlist={{ .Values.node.elc.http.allowlist }}
    {{ end }}

    {{ if  .Values.node.elc.rpc.enabled -}}
    # JSON-RPC
    rpc-http-enabled={{ .Values.node.elc.rpc.enabled }}
    rpc-http-host={{ .Values.node.elc.rpc.host | quote }}
    rpc-http-port={{ .Values.node.elc.rpc.port }}
    rpc-http-api={{ .Values.node.elc.rpc.api }}
    rpc-http-cors-origins={{ .Values.node.elc.rpc.corsOrigins }}
    rpc-http-authentication-enabled={{ .Values.node.elc.rpc.authenticationEnabled }}
    revert-reason-enabled=true
    {{ end }}

    {{ if  .Values.node.elc.metrics.enabled -}}
    # Metrics
    metrics-enabled={{ .Values.node.elc.metrics.enabled }}
    metrics-host={{ .Values.node.elc.metrics.host | quote }}
    metrics-port={{ .Values.node.elc.metrics.port }}
    {{ end }}

{{- end }}