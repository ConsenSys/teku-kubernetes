{{- if eq .Values.node.elc.client "geth" }}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ template "teku.fullname" . }}-geth
  labels:
{{- if and (eq .Values.cluster.provider "azure") (.Values.cluster.cloudNativeServices) }}
    aadpodidbinding: "{{ .Values.azure.identityName }}"
{{- end }}
    app.kubernetes.io/name: geth-statefulset
    app.kubernetes.io/component: geth
    app.kubernetes.io/part-of: {{ include "teku.fullname" . }}
    app.kubernetes.io/namespace: {{ .Release.Namespace }}
    app.kubernetes.io/release: {{ .Release.Name }}
    app.kubernetes.io/managed-by: helm
  namespace: {{ .Release.Namespace }}
spec:
  replicas: 1
  podManagementPolicy: OrderedReady
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: geth-statefulset
      app.kubernetes.io/component: geth
      app.kubernetes.io/part-of: {{ include "teku.fullname" . }}
      app.kubernetes.io/namespace: {{ .Release.Namespace }}
      app.kubernetes.io/release: {{ .Release.Name }}
      app.kubernetes.io/managed-by: helm
  serviceName: {{ include "teku.fullname" . }}-service-internal
  volumeClaimTemplates:
  - metadata:
      name: data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: {{ include "teku.fullname" . }}-storage
      resources:
        requests:
          storage: "{{ .Values.cluster.storage.pvcSizeLimit }}"
  template:
    metadata:
      labels:
{{- if and (eq .Values.cluster.provider "azure") (.Values.cluster.cloudNativeServices) }}        
        aadpodidbinding: "{{ .Values.azure.identityName }}"
{{- end }}
        app.kubernetes.io/name: geth-statefulset
        app.kubernetes.io/component: geth
        app.kubernetes.io/part-of: {{ include "teku.fullname" . }}
        app.kubernetes.io/namespace: {{ .Release.Namespace }}
        app.kubernetes.io/release: {{ .Release.Name }}
        app.kubernetes.io/managed-by: helm
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: {{ .Values.node.elc.metrics.port | quote}}
        prometheus.io/path: "/debug/metrics/prometheus"
    spec:
{{- if and (eq .Values.cluster.provider "aws") (.Values.cluster.cloudNativeServices) }}
      serviceAccountName: {{ .Values.aws.serviceAccountName }}
{{- else }}
      serviceAccountName: {{ include "teku.fullname" . }}-sa
{{- end }}
      initContainers:
      - name: wait-for-service
        image: busybox
        command: ["sh", "-c", "while ! nslookup {{ include "teku.fullname" . }}-discovery; do echo 'service still not up' && sleep 1; done;"]
      - name: set-external-ip
        image: gcr.io/cloud-builders/kubectl:latest
        command: ["/bin/bash"]
        args:
          - -c
          - >-
              sleep 10;
              EXTERNALIP=$(kubectl get services -n {{ .Release.Namespace }} {{ include "teku.fullname" . }}-discovery --output jsonpath='{.status.loadBalancer.ingress[0].ip}');
              echo $EXTERNALIP;
              kubectl get cm {{ include "teku.fullname" . }}-geth-config -o yaml -n {{ .Release.Namespace }} | sed "s/nat-extip: .*/nat-extip=\"${EXTERNALIP}\"/g" | kubectl replace -n {{ .Release.Namespace }} -f -

      containers:
      - name: {{ .Release.Name }}-geth
        image: {{ .Values.image.geth.repository }}:{{ .Values.image.geth.tag }}
        imagePullPolicy: {{ .Values.image.geth.pullPolicy }}
        resources:
          requests:
            cpu: "{{ .Values.node.elc.resources.cpuRequest }}"
            memory: "{{ .Values.node.elc.resources.memRequest }}"
          limits:
            cpu: "{{ .Values.node.elc.resources.cpuLimit }}"
            memory: "{{ .Values.node.elc.resources.memLimit }}"
        env:
          - name: POD_IP
            valueFrom:
              fieldRef:
                fieldPath: status.podIP
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: EXT_IP
            valueFrom:
              configMapKeyRef:
                name: geth-config
                key: nat-extip
        volumeMounts:
          - name: geth-config
            mountPath: /etc/geth
            readOnly: true
          - name: keys
            mountPath: {{ .Values.node.elc.keysPath }}
            readOnly: true
          - name: data
            mountPath: {{ .Values.node.elc.dataPath }}
        ports:
          - name: elc-rpc
            containerPort: {{ .Values.node.elc.rpc.port }}
            protocol: TCP
          - name: elc-engine
            containerPort: {{ .Values.node.elc.engine.port }}
            protocol: TCP
          - name: elc-rlpx
            containerPort: {{ .Values.node.elc.p2p.port }}
            protocol: TCP
          - name: elc-discovery
            containerPort: {{ .Values.node.elc.p2p.port }}
            protocol: UDP
          - name: elc-metrics
            containerPort: {{ .Values.node.elc.metrics.port }}
            protocol: TCP

        command:
          - /bin/sh
          - -c
        args:
          - |
            exec

            geth \
            --verbosity {{ .Values.node.elc.geth.verbosity }} \
            --datadir {{ .Values.node.elc.dataPath }} \
            --syncmode {{ .Values.node.elc.syncmode }} \
            --port {{ .Values.node.elc.p2p.port }} \
            --identity {{ .Values.node.elc.identity }} \
            --networkid {{ .Values.node.network }} \
            --authrpc.addr {{ .Values.node.elc.engine.host | quote }} --authrpc.port {{ .Values.node.elc.engine.port }} --authrpc.vhosts {{ join "," .Values.node.elc.engine.hostAllowlist | quote }} --authrpc.jwtsecret {{  .Values.node.elc.engine.jwtSecretPath | quote }} \
          {{- if .Values.node.elc.metrics.enabled }}
            --metrics --pprof --pprof.addr {{ .Values.node.elc.metrics.host | quote }} --pprof.port {{ .Values.node.elc.metrics.port}} \
          {{- end }}
          {{- if .Values.node.elc.rpc.enabled }}
            --http --http.addr {{ .Values.node.elc.rpc.addr }} --http.port {{ .Values.node.elc.rpc.port }} --http.corsdomain {{ join "," .Values.node.elc.rpc.corsOrigins | quote }} --http.vhosts {{ join "," .Values.node.elc.rpc.vHosts | quote }} --http.api {{ join "," .Values.node.elc.rpc.api | quote }} \
          {{- end }}
            --nat extip:$POD_IP

        livenessProbe:
          httpGet:
            path: /liveness
            port: {{ .Values.node.elc.rpc.port }}
            httpHeaders:
              - name: Content-Type
                value: application/json            
          initialDelaySeconds: 180
          periodSeconds: 60
      volumes:
      - name: geth-config
        configMap:
          name: {{ include "teku.fullname" . }}-geth-config
      - name: keys
        secret:
          secretName: {{ include "teku.fullname" . }}-keys

{{- end }}