---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ include "teku.fullname" . }}-pre-install-hook
  namespace: {{ .Release.Namespace }}
  annotations:
    "helm.sh/hook": pre-install
    "helm.sh/hook-weight": "0"
    "helm.sh/hook-delete-policy": "hook-succeeded"
  labels:
{{- if and (eq .Values.cluster.provider "azure") (.Values.cluster.cloudNativeServices) }}
    aadpodidbinding: "{{ .Values.azure.identityName }}"
{{- end }}
spec:
  backoffLimit: 1
  completions: 1
  template:
{{- if and (eq .Values.cluster.provider "azure") (.Values.cluster.cloudNativeServices) }}
    metadata:
      labels:
        aadpodidbinding: "{{ .Values.azure.identityName }}"
{{- end }}
    spec:
{{- if and (eq .Values.cluster.provider "aws") (.Values.cluster.cloudNativeServices) }}
      serviceAccountName: {{ .Values.aws.serviceAccountName }}
{{- else }}
      serviceAccountName: {{ include "teku.fullname" . }}-hooks-sa
{{- end }}
      restartPolicy: "OnFailure"
      containers:
        - name: {{ template "teku.fullname" . }}-pre-start-hook
          image: {{ .Values.image.hooks.repository }}:{{ .Values.image.hooks.tag }}
          imagePullPolicy: {{ .Values.image.besu.pullPolicy }}
          securityContext:
            runAsUser: 0
          command:
            - /bin/bash
            - -c
          args:
            - |

              function createSharedSecret {
                rm /tmp/jwtsecret.hex
                openssl rand -hex 32 | tr -d "\n" > /tmp/jwtsecret.hex
              }

              # keys here is generic if there are more to add in?
              # TODO: check this, if its just the one then rename the func
              function safeWriteSecret {
                key=$1
                fpath=$2
                kubectl get secret ${key}-keys --namespace {{ .Release.Namespace }} -o json > /dev/null 2>&1
                if [ $? -ne 0 ]; then
                  kubectl create secret generic ${key}-keys --namespace {{ .Release.Namespace }} --from-file=jwtSharedSecret.hex=${fpath}/jwtsecret.hex 
                else
                  # if the key exists pull it from secrets so that when you update the enodes configmap, you have the right value
                  kubectl get secrets ${key}-keys --namespace {{ .Release.Namespace }}  -o json | jq '.data.enode' | tr -d '"'| base64 --decode > /tmp/enode
                fi
              }

              echo "{{ template "teku.fullname" . }} pre-install hook ..."
              echo "JWT shared key generation ..."
              createSharedSecret
              safeWriteSecret {{ template "teku.fullname" . }} /tmp
              echo "{{ template "teku.fullname" . }} pre-install hook completed"
